name: 编译OpenWrt固件(Lean_x86_64)

on:
  workflow_dispatch:
    inputs:
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean

      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean

      CLEAN_CACHE:
        description: '清理编译缓存'
        required: false
        default: 'false'
        type: boolean

  schedule:
    - cron: 0 17 4,9,14,19,24,31 * *

env:
  TZ: Asia/Shanghai
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  GITHUB_RELEASE: https://github.com/aoxijy/aoxi-openwrt/releases

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    name: 编译 Lean_x86_64
    strategy:
      fail-fast: false
      matrix:
        target: ["Lean_x86_64"]

    steps:
    - name: Checkout 仓库
      uses: actions/checkout@v4

    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "FIRMWARE_MESSAGE=${FIRMWARE_MESSAGE}" >> $GITHUB_ENV
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
        echo "CACHE_BUILD=${CACHE_BUILD}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "TELEGRAM_BOT=${TELEGRAM_BOT}" >> $GITHUB_ENV
        echo "HOME=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "WORKPATH=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV

    - name: 清理编译缓存（如需要）
      if: github.event.inputs.CLEAN_CACHE == 'true'
      run: |
        echo "正在强制清理编译缓存..."
        sudo rm -rf /github-builder/openwrt
        sudo rm -rf $GITHUB_WORKSPACE/openwrt
        echo "编译缓存已清理"

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison \
                   build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj \
                   flex gawk gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man \
                   intltool lib32gcc-s1 libc6-i386 libelf-dev libglib2.0-dev libgmp3-dev \
                   libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libreadline-dev libssl-dev \
                   libpython3-dev libtool libyaml-dev libz-dev lld llvm lrzsz msmtp ninja-build \
                   p7zip p7zip-full patch pkgconf python3 python3-ply python3-docutils \
                   python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
                   texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd libfuse-dev \
                   gettext genisoimage python3-setuptools || true
        sudo timedatectl set-timezone "$TZ"
        sudo -E apt -y autoremove --purge
        sudo -E apt clean

    - name: 下载Lean_x86_64源码
      working-directory: /github-builder
      run: |
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /github-builder/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存加速
      uses: stupidloud/cachewrtbuild@main
      if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载源, 定制文件并生成自定义配置
      run: |
        cd openwrt
        cp -Rf ../build/${{matrix.target}}/* ./
        echo "写入配置文件..."
        mv ${WORKPATH}/${CONFIG_FILE} .config
        echo "强制使用用户自定义配置覆盖..."
        if [ -f "../Lean_x86_64.config" ]; then
          echo "发现 Lean_x86_64.config，覆盖当前配置..."
          cp -f "../Lean_x86_64.config" .config
          echo "用户自定义配置已覆盖当前配置。"
        else
          echo "未找到 Lean_x86_64.config，继续使用原有配置。"
        fi
        make defconfig

    - name: 输出编译信息
      run: |
        cd openwrt
        echo "当前配置内容："
        cat .config

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) V=sc || (echo "编译失败，请检查日志" && exit 1)

    - name: 查看固件产物目录内容
      run: |
        ls -lhR openwrt/bin/targets/

    - name: 整理固件文件
      if: success()
      id: organizer
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/buildinfo
        cp -rf openwrt/.config ./artifact/buildinfo/${{matrix.target}}.config || true
        rm -rf $(find openwrt/bin/targets/ -type d -name "packages")
        cp -rf $(find openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/ || true        
        cp -rf $(find openwrt/bin/targets/ -type f \( -name "*squashfs*efi*img*" -o -name "*squashfs*sysupgrade*bin*" -o -name "*squashfs*factory*bin*" \) ) ./artifact/firmware/
        echo "编译完成时间..."
        START_SECONDS=${{ env.START_SECONDS }}
        END_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        END_SECONDS=$(date --date="$END_TIME" +%s)
        SECONDS=$((END_SECONDS-START_SECONDS))
        HOUR=$(( $SECONDS/3600 )) && MIN=$(( ($SECONDS-${HOUR}*3600)/60 )) && SEC=$(( $SECONDS-${HOUR}*3600-${MIN}*60 ))
        echo "BUILD_TIME=${HOUR}时${MIN}分${SEC}秒" >> $GITHUB_ENV

    - name: 上传固件文件
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_firmware_${{ env.FILE_TIME }}
        path: ./artifact/firmware/

    - name: 上传编译日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_log_${{ github.run_id }}
        path: openwrt/build.log

    - name: 上传固件信息
      if: steps.compile.outcome == 'success' && env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_buildinfo_${{ env.FILE_TIME }}
        path: ./artifact/buildinfo/

    - name: 自动发布固件到 Releases
      uses: ncipollo/release-action@main
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        name: ${{ env.FILE_TIME1 }} 「 ${{ env.FIRMWARE_MESSAGE }} 」
        tag: ${{ env.FILE_TIME2 }}-${{matrix.target}}
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        body: |            
            ★  源码 : ${{ env.REPO_URL }}
            ★  分支 : ${{ env.REPO_BRANCH }}
            ★  感谢源码作者无私分享！

            🖥 内核版本：${{ env.KERNEL_PATCHVER }}

            🎈 编译时间：${{ env.FILE_TIME1 }}

            ⏰ 编译用时：${{ env.BUILD_TIME }}

            🎉 [ ${{ env.FIRMWARE_MESSAGE }} ]固件下载

            ━━━━━━━━━━━━━━━━━━━━

            =========================================

        artifacts: ./artifact/firmware/*

    - name: 删除自动发布的旧固件
      uses: shidahuilang/delete-older-releases@main
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 20
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: 编译成功信息通知-Telegram
      if: steps.compile.outcome == 'success' && env.TELEGRAM_BOT == 'true'
      run: |
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=

           您的${{ env.FIRMWARE_MESSAGE }}固件成功编译完成了！

          🖥 内核版本：${{ env.KERNEL_PATCHVER }}

          🎈 编译时间：${{ env.FILE_TIME1 }}

          ⏰ 编译用时：${{ env.BUILD_TIME }}

          🎉 发布地址：${{ env.GITHUB_RELEASE }}

          🌴 固件已经编译完成 🎈！！！

          " >/dev/null 2>&1 && echo "ok..."
